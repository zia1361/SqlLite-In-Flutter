#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SurveyBeta.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SurveyBeta")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertForm(Form instance);
    partial void UpdateForm(Form instance);
    partial void DeleteForm(Form instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertFormSubmission(FormSubmission instance);
    partial void UpdateFormSubmission(FormSubmission instance);
    partial void DeleteFormSubmission(FormSubmission instance);
    partial void InsertFormSubmissionValue(FormSubmissionValue instance);
    partial void UpdateFormSubmissionValue(FormSubmissionValue instance);
    partial void DeleteFormSubmissionValue(FormSubmissionValue instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SurveyBetaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Form> Forms
		{
			get
			{
				return this.GetTable<Form>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<FormSubmission> FormSubmissions
		{
			get
			{
				return this.GetTable<FormSubmission>();
			}
		}
		
		public System.Data.Linq.Table<FormSubmissionValue> FormSubmissionValues
		{
			get
			{
				return this.GetTable<FormSubmissionValue>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forms")]
	public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FormName;
		
		private System.DateTime _CreatedOn;
		
		private int _CreatedByUserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<FormSubmission> _FormSubmissions;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Form()
		{
			this._FormSubmissions = new EntitySet<FormSubmission>(new Action<FormSubmission>(this.attach_FormSubmissions), new Action<FormSubmission>(this.detach_FormSubmissions));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_FormSubmission", Storage="_FormSubmissions", ThisKey="Id", OtherKey="FormId")]
		public EntitySet<FormSubmission> FormSubmissions
		{
			get
			{
				return this._FormSubmissions;
			}
			set
			{
				this._FormSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Form", Storage="_User", ThisKey="CreatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._CreatedByUserId = value.Id;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormSubmissions(FormSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_FormSubmissions(FormSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _LoginId;
		
		private string _Password;
		
		private System.DateTime _RegisteredOn;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Form> _Forms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoginIdChanging(string value);
    partial void OnLoginIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRegisteredOnChanging(System.DateTime value);
    partial void OnRegisteredOnChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public User()
		{
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LoginId
		{
			get
			{
				return this._LoginId;
			}
			set
			{
				if ((this._LoginId != value))
				{
					this.OnLoginIdChanging(value);
					this.SendPropertyChanging();
					this._LoginId = value;
					this.SendPropertyChanged("LoginId");
					this.OnLoginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredOn", DbType="DateTime NOT NULL")]
		public System.DateTime RegisteredOn
		{
			get
			{
				return this._RegisteredOn;
			}
			set
			{
				if ((this._RegisteredOn != value))
				{
					this.OnRegisteredOnChanging(value);
					this.SendPropertyChanging();
					this._RegisteredOn = value;
					this.SendPropertyChanged("RegisteredOn");
					this.OnRegisteredOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Form", Storage="_Forms", ThisKey="Id", OtherKey="CreatedByUserId")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormSubmission")]
	public partial class FormSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FormId;
		
		private string _DeviceId;
		
		private System.DateTime _SubmittedOn;
		
		private System.DateTime _SyncedOn;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<FormSubmissionValue> _FormSubmissionValues;
		
		private EntityRef<Form> _Form;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFormIdChanging(int value);
    partial void OnFormIdChanged();
    partial void OnDeviceIdChanging(string value);
    partial void OnDeviceIdChanged();
    partial void OnSubmittedOnChanging(System.DateTime value);
    partial void OnSubmittedOnChanged();
    partial void OnSyncedOnChanging(System.DateTime value);
    partial void OnSyncedOnChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public FormSubmission()
		{
			this._FormSubmissionValues = new EntitySet<FormSubmissionValue>(new Action<FormSubmissionValue>(this.attach_FormSubmissionValues), new Action<FormSubmissionValue>(this.detach_FormSubmissionValues));
			this._Form = default(EntityRef<Form>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormId", DbType="Int NOT NULL")]
		public int FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceId", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedOn", DbType="DateTime NOT NULL")]
		public System.DateTime SubmittedOn
		{
			get
			{
				return this._SubmittedOn;
			}
			set
			{
				if ((this._SubmittedOn != value))
				{
					this.OnSubmittedOnChanging(value);
					this.SendPropertyChanging();
					this._SubmittedOn = value;
					this.SendPropertyChanged("SubmittedOn");
					this.OnSubmittedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SyncedOn", DbType="DateTime NOT NULL")]
		public System.DateTime SyncedOn
		{
			get
			{
				return this._SyncedOn;
			}
			set
			{
				if ((this._SyncedOn != value))
				{
					this.OnSyncedOnChanging(value);
					this.SendPropertyChanging();
					this._SyncedOn = value;
					this.SendPropertyChanged("SyncedOn");
					this.OnSyncedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormSubmission_FormSubmissionValue", Storage="_FormSubmissionValues", ThisKey="Id", OtherKey="SubmissionId")]
		public EntitySet<FormSubmissionValue> FormSubmissionValues
		{
			get
			{
				return this._FormSubmissionValues;
			}
			set
			{
				this._FormSubmissionValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_FormSubmission", Storage="_Form", ThisKey="FormId", OtherKey="Id", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.FormSubmissions.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.FormSubmissions.Add(this);
						this._FormId = value.Id;
					}
					else
					{
						this._FormId = default(int);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormSubmissionValues(FormSubmissionValue entity)
		{
			this.SendPropertyChanging();
			entity.FormSubmission = this;
		}
		
		private void detach_FormSubmissionValues(FormSubmissionValue entity)
		{
			this.SendPropertyChanging();
			entity.FormSubmission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormSubmissionValues")]
	public partial class FormSubmissionValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubmissionId;
		
		private string _QuestionText;
		
		private string _AnswerText;
		
		private EntityRef<FormSubmission> _FormSubmission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubmissionIdChanging(int value);
    partial void OnSubmissionIdChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnAnswerTextChanging(string value);
    partial void OnAnswerTextChanged();
    #endregion
		
		public FormSubmissionValue()
		{
			this._FormSubmission = default(EntityRef<FormSubmission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionId", DbType="Int NOT NULL")]
		public int SubmissionId
		{
			get
			{
				return this._SubmissionId;
			}
			set
			{
				if ((this._SubmissionId != value))
				{
					if (this._FormSubmission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIdChanging(value);
					this.SendPropertyChanging();
					this._SubmissionId = value;
					this.SendPropertyChanged("SubmissionId");
					this.OnSubmissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerText", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this.OnAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerText = value;
					this.SendPropertyChanged("AnswerText");
					this.OnAnswerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormSubmission_FormSubmissionValue", Storage="_FormSubmission", ThisKey="SubmissionId", OtherKey="Id", IsForeignKey=true)]
		public FormSubmission FormSubmission
		{
			get
			{
				return this._FormSubmission.Entity;
			}
			set
			{
				FormSubmission previousValue = this._FormSubmission.Entity;
				if (((previousValue != value) 
							|| (this._FormSubmission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormSubmission.Entity = null;
						previousValue.FormSubmissionValues.Remove(this);
					}
					this._FormSubmission.Entity = value;
					if ((value != null))
					{
						value.FormSubmissionValues.Add(this);
						this._SubmissionId = value.Id;
					}
					else
					{
						this._SubmissionId = default(int);
					}
					this.SendPropertyChanged("FormSubmission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
